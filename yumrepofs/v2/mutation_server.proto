// yfs2 (Yumrepofs2) virtual read-write-many Yum repository server
// Copyright (C) 2023 Mustafa Gezen
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
syntax = "proto3";

package yumrepofs.v2;

option java_multiple_files = true;
option java_outer_classname = "MutationServerProto";
option java_package = "org.resf.peridot.yumrepofs.v2";
option go_package = "go.resf.org/peridot/yumrepofs/pb/v2;yfs2pb";

service MutationServer {
  // UploadRpm uploads a RPM file.
  // Returns AlreadyExists error if NVR already exists.
  // Returns PreconditionFailed if someone else is uploading the same NVR at the same time.
  //
  // First an upload will start a Multipart upload session. After completing the full upload
  // the keys for etcd will be written. The format is like /yfs2/{source_nvr}/{nvr} -> {sha256}.
  // If it's a source RPM then it will be written to /yfs2/{source_nvr}/source -> {sha256}.
  // Module component RPMs will be written to /yfs2/{module_name}-{module_stream}-{module_context}/{source_nvr}/{nvr} -> {sha256}.
  // Module source RPMs will be written to /yfs2/{module_name}-{module_stream}-{module_context}/{source_nvr}/source -> {sha256}.
  // The NVR can then be tagged into a project.
  rpc UploadRpm(stream UploadRpmRequest) returns (UploadRpmResponse);

  // UploadModuleMetadata uploads a module metadata file.
  rpc UploadModuleMetadata(UploadModuleMetadataRequest) returns (UploadModuleMetadataResponse);

  // Returns a list of RPMs that DO NOT exist in object storage.
  rpc ListMissingRPMs(ListMissingRPMsRequest) returns (ListMissingRPMsResponse);

  // TagNVR tags a NVR into a project.
  // Returns AlreadyExists error if NVR is already tagged into the project.
  // Returns NotFound error if NVR does not exist.
  // Returns PreconditionFailed if someone else is tagging the same NVR into the project at the same time.
  rpc TagNVR(TagNVRRequest) returns (TagNVRResponse);

  // ReturnMissingNVRs returns a list of NVRs that are missing from a project.
  // Returns NotFound error if project does not exist.
  rpc ReturnMissingNVRs(ReturnMissingNVRsRequest) returns (ReturnMissingNVRsResponse);
}

message UploadRpmRequest {
  // RPM file content.
  bytes content = 1;

  // Whether this part finishes the upload.
  // If this is set, then content will be ignored.
  // All content must be uploaded before this part.
  bool finished = 2;
}

message UploadRpmResponse {
  // Returns the Source RPM NVR (name-version-release) string.
  string src_nvr = 1;

  // Whether the Source RPM NVR can be tagged alone into a project.
  // Only non-module RPMs can be tagged alone. And they are grouped under
  // a specific source NVR.
  // Modules can be tagged into projects using their MSC (module-stream-context).
  // The MSC is returned after successful module metadata upload.
  bool can_tag_alone = 2;
}

message UploadModuleMetadataRequest {
  // Module metadata file content.
  bytes normal = 1;

  // Module metadata file content for the "devel" variant.
  // Must match {name}-devel (name from normal variant).
  bytes devel = 2;
}

message UploadModuleMetadataResponse {
  // Returns the module stream context (MSC) string.
  string msc = 1;
}

message ListMissingRPMsRequest {
  // List of hashes of RPMs to check
  // Hash type is SHA256.
  repeated string rpm_sha256_sums = 1;
}

message ListMissingRPMsResponse {
  // List of hashes of RPMs that do not exist in object storage.
  repeated string missing_rpm_sha256_sums = 1;
}

message TagNVRRequest {
  // NVR to tag into a project.
  string nvr = 1;

  // Project to tag into.
  string project = 2;
}

message TagNVRResponse {}

message ReturnMissingNVRsRequest {
  // Project to check.
  string project = 1;
}

message ReturnMissingNVRsResponse {
  // List of NVRs that are missing from the project.
  repeated string missing_nvrs = 1;
}
